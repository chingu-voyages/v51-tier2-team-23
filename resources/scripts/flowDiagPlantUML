@startuml
start
:Initialization;
#e9fffc:Instantiate dataset;
#e9fffc:Get recordIds from the dataset;
#e9fffc:Instantiate empty data collectors;
note right
__selectedCells and __updatedContribs objs
end note
#e9fffc:Get Total Allotment;
#e9fffc:Instantiate a **function**
to collect Editable cells ("Editables");
#e9fffc:Instantiate a **function**
to collect the Output cells;
#lightpink:Declare populateFunc;
#lightpink:Declare __getCheckedColRows;
#lightpink:Declare editBtnFunc;
#lightpink:Declare updateBtnFunc;
#lightgreen:run **populateFunc**;
end
@endtuml

@startuml
partition "**function** populateFunc"{
note right
NOTE **populateFunc**
====
This function runs at laoding.
It completes the table with rows
as records of the dataset.
It also add the listeners and 
pre-set some of the temporary 
data collections.
end note
start
:Check for table existence (if not, throw error)
#lightblue:Calculate Even Contribution: Split;
#lightblue:Calculate Even Contribution: Percentage;
#skyblue:Iterate through the dataset 
and populate the table;
note right
declare corresponding attributes
insert output values by cell
insert input elements when editable
end note
#lightgreen:Attach event listeners (buttons);
end
}
@enduml

@startuml
partition "**function** __getCheckedColRows"{
note right
NOTE **__getCheckedColRows**
====
This function helps to determine
which rows and columns have been selected
by the user, storing that information for later
use in the editing process
end note
#e9fffc:Select Radio and Checkbox Inputs;
#e9fffc:Retrieve Checked Inputs;
if(Checked Inputs?) then (yes)
#e9fffc:Store Selected Values;
#lightgreen:Update row count;
#e9fffc:Collect Editable Cells;
:Return true;
else (no)
:Return false;
endif
end
}
partition "**function** editBtnFunc"{
note right
NOTE **editBtnFunc**
====
This function is an event of "Edit" button
It roles is to show the input fields for the
cells the user has selected
end note
start
:Initialization;
#lightgreen:Run __getCheckedColRows;
note right
If no cells retrieved, quit
end note
#skyblue:Loop, find and display 
input fields for selected cells;
note right
Compare HTMLElement id to col and rows ref ids
as collected when running __getCheckedColRows
end note
end
}
@enduml

@startuml
partition "**function** updateBtnFunc"{
note right
NOTE **updateBtnFunc**
====
This function is an event of "Update" button
It roles is to collect the inputs by the user
recalculate the values and update the whole
table accordingly before resetting all the 
temporary data collectors
end note
start
:Initialization;
:Check Selected Column (absolute -, 
relative splits or paid amounts);
#e9fffc:Collect Inputs for Editables accordingly;
if (is AbsSplt col?) then (yes)
#e9fffc:Get Outputs of that column;
#skyblue:Loop the Editables;
#lightgreen:Update __updateContrbs container 
with modified contribution while looping;
#skyblue:Loop the Outputs;
#lightgreen:Update __updateContrbs container 
with modified contribution while looping;
#lightgreen:Calculate the differences btw
current and previous contribs;
#e9fffc:Get Outputs of other columns;
#lightblue:Split the remaining contribution
evenly between the rest of the Participants;
#lightgreen:Update outputs (HTML span);
elseif (is RelSplt col?) then (yes)
#e9fffc:Get Outputs of that column;
#skyblue:Loop the Editables;
#lightgreen:Update __updateContrbs container 
with modified contribution while looping;
#skyblue:Loop the Outputs;
#lightgreen:Update __updateContrbs container 
with modified contribution while looping;
#lightgreen:Calculate the differences btw
current and previous contribs;
#lightgreen:Convert percentages to absolute 
contributions;
#e9fffc:Get Outputs of other columns;
#lightblue:Split the remaining contribution
evenly between the rest of the Participants;
#lightgreen:Update outputs (HTML span);
elseif (is Paid?) then (yes)
#e9fffc:Get Outputs of that column;
#skyblue:Loop the Editables;
#e9fffc:Get Outputs of other columns;
#skyblue:Loop the Outputs;
#lightgreen:Update Output columns with same array 
index with modified contribution while looping;
note right
Here there is no need of calculating a split
end note
endif
#lightgreen: Cleanup all the containers and set
to initial state;
end
}
@enduml